// < 구조 분해 할당 >
// const [dog, cat, duck] = animals;
// const { name, email } = user;
// const { name: username, email: userEmail } = user;
//  => 이런거를 구조분해할당이라고 한다

// 구조 분해 할당 = 배열이나 객체를 분해해서 각각의 값을 개별적인 변수에 담는 표현식이다
// 구조 분해 할당을 사용하면 배열이나 객체를 더 간결하게 다룰 수 있기 때문에 우리가 작성해야하는 코드의 양을 눈에 띄게 줄일 수 있다.

// 이번에는 배열 구조 분해 할당과 객체 구조 분해 할당 => 두가지 알아볼거다
// 그리고 구조분해 할당을 더 유용하게 사용할수 있는 팁

// =======================================================================

// < 배열 구조 분해 할당 >
const animals = ["강아지", "고양이", "오리"];
// animals러는 배열안에는 강아지, 고양이, 오리 이렇게 세 문자열이 들어 있다
// 강아지라는 요소를 dog이라는 변수에 담고, 고양이라는 요소를 cat이라는 변수에 담고, 오리라는 요소를 duck이라는 변수에 담을거다

// 👇
const dog1 = animals[0];
const cat1 = animals[1];
const duck1 = animals[2];
console.log("1.첫번째 ->", dog1, cat1, duck1); // 강아지 고양이 오리
// 이렇게 해도 되지만 더 간편한 방법이 있다

// ------------------------------------------------

// 👇 구조 분해 할당을 사용
const [dog2, cat2, duck2] = animals;
// [] 대괄호 안에 원하는 변수 이름을 적어 놓으면 각각의 이름에 해당하는 변수가 생성되고 -> animals 배열을 분해해서 -> 각 요소를 같은 순서에 있는 변수에 집어 넣어주는거다.
//  =>  이것이 바로 < 배열 구조 분해 할당 > 이다
console.log("2.두번째 ->", dog2, cat2, duck2); // 강아지 고양이 오리

// ------------------------------------------------

// 👇 만약 첫번째 요소(강아지)와 세번째 요소(오리)만 필요하고 두번째 요소(고양이)가 필요 없다면?
// 모든 요소들을 연이어서 전부 받아올 필요가 없을 때는 필요없는 변수를 빼주면 된다.
const [dog3, , duck3] = animals;
console.log("3.세번째 ->", dog3, duck3); // 강아지 오리

// ------------------------------------------------

// 👇 <존재하지 않는 요소 받기> 만약 존재하지 않는 네번째 요소를 받아오려고 하면?
// undefined라고 출력된다 => 존재하지 않는 네번째 요소에 접근하려고 해서
const [dog4, cat4, duck4, cow4] = animals;
console.log("4.네번째 ->", dog4, cat4, duck4, cow4); // 강아지 고양이 오리 undefined

// ------------------------------------------------

// 👇 <기본값 설정> cow에 기본 값을 설정해 줄 수 있다.
const [dog5, cat5, duck5, cow5 = "소"] = animals;
console.log("5.다섯번째 ->", dog5, cat5, duck5, cow5); // 강아지 고양이 오리 소
//  => 기본 값을 넣어 준 대로 소가 출력이 된다.
// => 이처럼 변수의 기본 값을 넣어 주면 배열을 분해해서 가져온 갑이 존재하지 않는다면 undefined 대신 넣어준 기본 값(소)을 사용하게 된다.

// ------------------------------------------------

// 👇 존재하는 요소에 기본값 넣어주기
const [dog6, cat6, duck6 = "꽥꽥", cow6 = "황소"] = animals;
console.log("6.여섯번째 ->", dog6, cat6, duck6, cow6); // 강아지 고양이 오리 황소
// => duck6에 해당하는 요소는 이미 animals 배열에 존재하기 때문에 기본값이 아니라 존재하는 값인 '오리'가 duck6에 할당이 되는거다.

// ------------------------------------------------

// 👇 animals 배열에서 구조 분해 할당으로 요소를 변수에 할당한 다음에 -> 나머지 것들은 배열에 따로 모아서 새로운 변수에 할당해 줄 수도 있다.
const animals7 = ["강아지7", "고양이7", "오리7", "소7"];
// 첫번째 요소(강아지) , 두번째 요소(고양이)만 변수로 빼오고 나머지 것들은 배열 형태로 가져오고 싶다면?
const [dog7, cat7, ...rest] = animals7;
// 가져올 요소들을 할당해 줄 변수 이름을 적어주고 -> 가져올 요소들 변수 이름(dog7, cat7)을 적어주고 -> ...뒤에 다가 배열을 담을 변수의 이름을 작성해주면 된다.
console.log("7.일곱번째 ->", dog7, cat7, rest); // 강아지7 고양이7 (2) ['오리7', '소7']
//  =>  각 변수들이 잘 출력되고 나머지들은 다 모아서 배열 형태로 할당을 해줬다.

// 그럼 ...은 뭘까? => 사용되는 상황에 따라서 <스프레드 연산자> or <나머지 구문> 이라고 불리운다
//  이렇게 스프레드 연산자를 사용해서 맨 뒤에다가 변수 이름을 붙여주면 나머지 요소들을 다 모아다가 그 안에다가 배열로 할당해 준다.
//  -> 물론 배열 변수 이름은 아무거나 사용해도 된다.

// ==========> 배열을 구조 분해 할당에서 사용하는 방법 <=================
