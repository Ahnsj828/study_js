// < 구조 분해 할당 >
// const [dog, cat, duck] = animals;
// const { name, email } = user;
// const { name: username, email: userEmail } = user;
//  => 이런거를 구조분해할당이라고 한다

// 구조 분해 할당 = 배열이나 객체를 분해해서 각각의 값을 개별적인 변수에 담는 표현식이다
// 구조 분해 할당을 사용하면 배열이나 객체를 더 간결하게 다룰 수 있기 때문에 우리가 작성해야하는 코드의 양을 눈에 띄게 줄일 수 있다.

// 이번에는 배열 구조 분해 할당과 객체 구조 분해 할당 => 두가지 알아볼거다
// 그리고 구조분해 할당을 더 유용하게 사용할수 있는 팁

// =======================================================================

// < 객체 구조 분해 할당 >
// 객체 구조 분해 할당도 마찬가지로 우리가 객체를 다룰 때 작성해야 되는 양의 코드를 줄여준다.

const animals = {
  dog: "강아지",
  cat: "고양이",
  duck: "오리",
};
// animals라는 객체에는 강아지, 고양이, 오리를 나타내는 key(=> dog) 와 값(=> 강아지)을 가지고 있다.
// 이 각각의 값들을 변수로 빼올 때 보통 이렇게 한다.

// const dog = animals.dog;
// // dog 변수에 강아지를 가져오기 위해서 animals 객체 안에 있는 dog 이런식으로 .을 사용해서 접근을 하곤 한다.
// const cat = animals.cat;
// const duck = animals.duck;

// ------------------------------------------------

// 👇 구조 분해 할당을 사용
// .점을 사용해서 하나하나 따로 변수에 할당해 주지 않아도 된다.
// const { dog, cat, duck } = animals;
// 새로운 변수들을 만들고 싶은거니까 const 다음에 중괄호{}를 작성하면된다.
// 그러고 나서 그 중괄호{}안에 객체 안에 있는 키와 같은 이름의 변수를 넣어주면 된다.
// = animals 해주면된다.

// console.log(dog, cat, duck); // 강아지 고양이 오리

// => 객체 구조 분해 할당은 배열과는 다르게 대괄호[]가 아닌 중괄호{}를 사용한다
// => 변수들의 이름은 객체 안에 있는 key 값과 동일해야한다.
// 이렇게 객체 구조 분해 할당하면 animals객체를 분해해서 dog key에 해당하는 강아지를 dog라는 변수에 넣어주는 개념이다.
// 여기에서 중요한점! => 중괄호{}안에 변수를 넣을 때 변수의 이름을 key값과 동일하게만 해주면 되기 때문에 순서는 상관없다
// const { cat, dog, duck } = animals; 이렇게 해도 작동된다

// ------------------------------------------------

// // 👇 만약 객체의 두 번째 요소(고양이)만 변수에 담고 싶을 경우라면
// const { dog, cat } = animals;
// // 구조 분해 할당할때 중괄호{}안에 dog, cat만 넣으면 된다.
// console.log(dog, cat); // 강아지 고양이

// ------------------------------------------------

// // 👇 만약 변수 이름을 다른걸로 바꾸고 싶다면?
// const duck = "꽥꽥이";
// // 만약 프로퍼티의 키값이 다른 변수로 사용중이라 변수로 사용 못하는 경우에

// const { dog, cat, duck: duckName } = animals;

// console.log(duck); // 꽥꽥이
// console.log(dog, cat, duckName); // 강아지 고양이 오리
// // 구조 분해 할당에서 가져오는 duck을 다른 이름의 변수로 바꿔주면 된다.
// // => 뒤에다가 :땡땡 붙이고 바꾸고자 하는 이름을 적으면 된다.

// ------------------------------------------------

// // 👇 객체에 존재하지 않는 이름의 변수를 넣어 준다면?
// const { dog, cat, duck, cow = "소" } = animals;

// console.log(dog, cat, duck, cow);
// // 강아지 고양이 오리 undefined  <=  cow라고만 했을 때
// // 강아지 고양이 오리 소  <=  cow = "소" 라고 했을 때

// // => 뒤에다가 =는 붙이고 기본 값으로 하고자 하는 이름을 적으면 된다.

// ------------------------------------------------

// // 👇 만약 존재하고 있는 객체(dog)에 기본값을 넣어 준다면?
// const { dog = "복구", cat, duck } = animals;

// console.log(dog, cat, duck);
// // 강아지 고양이 오리

// // 기본값("복구")은 사용되지 않는다. 이미 위에 객체에서 (강아지)라고 값이 존재하기 때문이다.

// ------------------------------------------------

// 👇 만약 객체 안에 있는 것들 중에 필요한 것들만 변수로 따로 받아오고 나머지는 하나의 객체로서 받아오고 싶다면?
const { dog, ...rest } = animals;

console.log(dog, rest); // 강아지 {cat: '고양이', duck: '오리'}

// // ==========> 객체를 구조 분해 할당에서 사용하는 방법

// ------------------------------------------------

// < tip.1 > - 반복문에서 구조 분해 할당하기

const users = [
  { name: "철수", age: 25 },
  { name: "영희", age: 30 },
];
// users라는 배열 안에는 사용자를 나타내는 두개의 객체가 들어있다. 각 객체는 name과 age라는 key를 갖고 있다.
// for문을 사용해서 이 배열을 돌면서 각 사용자의 이름을 출력하는 코드를 작성해볼거다.

// for (const user of users) {
//   console.log(user);
//   // {name: '철수', age: 25}
//   // {name: '영희', age: 30}

//   console.log(user.name);
//   // 철수
//   // 영희
// }

//👇 구조 분해 할당
// user은 users배열 안에 객체가 된다.
// => 그렇기 때문에 user라는 변수를 따로 만들지 않고 바로 구조 분해 할당을 사용 할 수 있다.
// name key에 해당하는 값이 곧바로 {name} 변수에 들어간다.
//  => 그렇기 때문에 네임을 바로 출력을 해줘도 똑같은 결과가 나온다.
// for (const { name } of users) {
//   console.log(name);
//   // {name: '철수', age: 25}
//   // {name: '영희', age: 30}
// }

// ------------------------------------------------

// < tip.2 > - 함수의 매개변수로 전달된 객체를 구조 분해 할당하기

// const user = { name: "철수", age: 25 };

// function printUser(user) {
//   console.log(`${user.name}님은 ${user.age}살 이예요`);
// }

// printUser(user);

//👇 구조 분해 할당

// user라는 객체를 매개변수로 받을 때 통째로 넣어주는게 아니라 곧바로 구조 분해 할당을 해 줄 수 있다.

const user = { name: "철수", age: 25 };

function printUser({ name, age }) {
  // name과 age를 곧바로 가져와서
  console.log(`${name}님은 ${age}살 이예요`);
  // 사용하는 부분에서 user를 지우면 된다
}

printUser(user);

// ------------------------------------------------
